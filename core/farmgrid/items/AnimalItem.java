package farm.core.farmgrid.items;

import farm.core.UnableToInteractException;
import farm.inventory.product.Product;
import farm.inventory.product.Milk;
import farm.inventory.product.Wool;
import farm.inventory.product.Egg;
import farm.inventory.product.data.Quality;

import java.util.ArrayList;
import java.util.List;

/**
 * The {@code AnimalItem} class represents an animal in the farm grid.
 * It tracks whether the animal has been fed and whether it has produced a product for the day.
 * The class allows the animal to be fed and to produce products based on its type (e.g., cow, sheep, chicken).
 */
public class AnimalItem extends FarmItem {
    private boolean fed;
    private boolean collected;

    /**
     * Constructor for an {@code AnimalItem}. Initializes the animal with its name and symbol.
     * since animalItems can only be saved at the beginning of a day, no need for another
     * @param name   the name of the animal (e.g., "cow", "sheep", "chicken")
     * @param symbol the symbol representing the animal
     */
    public AnimalItem(String name, char symbol) {
        super(name, symbol);
        this.fed = false;
        this.collected = false;
    }

    /**
     * Feeds the animal, marking it as fed for the day.
     */
    public void feed() {
        fed = true;
    }

    /**
     * Checks whether the animal has been fed.
     *
     * @return {@code true} if the animal has been fed, {@code false} otherwise
     */
    public boolean isFed() {
        return fed;
    }

    /**
     * Checks whether the animal has produced a product for the day.
     *
     * @return {@code true} if the animal has produced a product, {@code false} otherwise
     */
    public boolean isCollected() {
        return collected;
    }

    /**
     * Marks the animal as having produced a product for the day.
     *
     * @param collected whether the animal has produced a product
     */
    public void setCollected(boolean collected) {
        this.collected = collected;
    }

    /**
     * Marks the animal as fed or not fed for the day.
     *
     * @param fed whether the animal has been fed
     */
    public void setFed(boolean fed) {
        this.fed = fed;
    }

    /**
     * Produces a product based on the animal type, if the animal has been fed and has not already produced a product.
     * Marks the animal as having produced a product.
     *
     * @param quality the quality of the product to be produced
     * @return the product generated by the animal
     * @throws UnableToInteractException if the animal has not been fed or has already produced a product
     */
    public Product produce(Quality quality) throws UnableToInteractException {
        if (!isFed()) {
            throw new UnableToInteractException("You have not fed this " + getName() + " today!");
        }
        if (isCollected()) {
            throw new UnableToInteractException("This " + getName()
                    + " has already produced an item today!");
        }
        setCollected(true);
        return getProduct(quality);
    }

    /**
     * Produces the appropriate product based on the animal type.
     *
     * @param quality the quality of the product to be produced
     * @return the product generated by the animal
     * @throws UnableToInteractException if the animal type is unknown
     */
    protected Product getProduct(Quality quality) throws UnableToInteractException {
        switch (getName()) {
            case "cow":
                return new Milk(quality);  // Return Milk for cow
            case "sheep":
                return new Wool(quality);  // Return Wool for sheep
            case "chicken":
                return new Egg(quality);   // Return Egg for chicken
            default:
                throw new UnableToInteractException("Unknown animal type: " + getName());
        }
    }

    /**
     * Factory method to create an {@code AnimalItem} based on its name.
     *
     * @param name the name of the animal
     * @return the corresponding {@code AnimalItem} or {@code null} if the name is unknown
     */
    public static AnimalItem createAnimal(String name) {
        switch (name) {
            case "cow":
                return new AnimalItem("cow", '\u096A');  // Symbol for cow
            case "sheep":
                return new AnimalItem("sheep", '\u0D94');  // Symbol for sheep
            case "chicken":
                return new AnimalItem("chicken", '\u09EC');  // Symbol for chicken
            default:
                return null;
        }
    }

    /**
     * Returns a list of styled information about the animal, including its name, symbol, fed status, and collected status.
     *
     * @return a list containing styled information about the animal
     */
    @Override
    public List<String> getStyled() {
        return new ArrayList<>(List.of(
                getName(),
                String.valueOf(getSymbol()),
                "Fed: " + isFed(),
                "Collected: " + isCollected()
        ));
    }

    /**
     * Returns a string representation of the animal, including its name, symbol, fed status, and collected status.
     *
     * @return a string representation of the animal
     */
    @Override
    public String toString() {
        return getName() + ", " + getSymbol() + ", Fed: " + isFed()
                + ", Collected: " + isCollected();
    }

    /**
     * Simulates the end of the day by resetting the fed and collected status of the animal.
     */
    @Override
    public void endDay() {
        this.fed = false;
        this.collected = false;
    }
}
