package farm.core.farmgrid.items;

import farm.core.UnableToInteractException;
import farm.inventory.product.Bread;
import farm.inventory.product.Jam;
import farm.inventory.product.Coffee;
import farm.inventory.product.Product;
import farm.inventory.product.data.Quality;

import java.util.ArrayList;
import java.util.List;

/**
 * The {@code PlantItem} class represents a plant item in the farm grid.
 * It tracks the growth stage of the plant, allows the plant to grow, and facilitates
 * harvesting when the plant is fully grown. Each plant type (e.g., berry, wheat, coffee)
 * has multiple growth stages, and symbols are used to represent these stages.
 * A part of Refactor stage #4 :DDD
 */
public class PlantItem extends FarmItem {
    private int stage;

    /**
     * Constructor for a {@code PlantItem}. Initializes the plant based on its type and symbol.
     *
     * @param name   the name of the plant (e.g., "berry", "wheat", "coffee")
     * @param symbol the symbol representing the current growth stage of the plant
     */
    public PlantItem(String name, char symbol) {
        super(name, symbol);
        this.stage = getStageFromSymbol(name, symbol);
    }

    /**
     * Gets the current growth stage of the plant.
     *
     * @return the current growth stage of the plant
     */
    public int getStage() {
        return stage;
    }

    /**
     * Updates the symbol of the plant based on its type and growth stage.
     * Different plant types have different symbols for each stage.
     *
     * @param itemType the type of the plant (e.g., "berry", "wheat", "coffee")
     * @param stage    the current growth stage of the plant
     * @return the symbol representing the current stage of the plant
     */
    public char updateStageSymbol(String itemType, int stage) {
        char[] berryStages = {'.', 'o', '@'};
        char[] wheatStages = {'ἴ', '#'};
        char[] coffeeStages = {':', ';', '*', '%'};

        return switch (itemType) {
            case "berry" -> berryStages[stage % berryStages.length];
            case "wheat" -> wheatStages[stage % wheatStages.length];
            case "coffee" -> coffeeStages[stage % coffeeStages.length];
            default -> ' ';
        };
    }

    /**
     * Advances the plant to the next growth stage if it is not fully grown.
     */
    public void grow() {
        if (!isFullyGrown()) {  // Grow only if not fully grown
            this.stage++;
            this.setSymbol(updateStageSymbol(this.getName(), this.stage));
        }
    }

    /**
     * Resets the plant's growth stage to zero after it has been harvested.
     */
    public void reset() {
        this.stage = 0;  // Reset stage to 0 after harvesting
        this.setSymbol(updateStageSymbol(this.getName(), this.stage));
    }

    /**
     * Harvests the plant and returns the harvested product if the plant is fully grown.
     * Resets the plant's stage after harvesting.
     *
     * @param quality the quality of the harvested product
     * @return the harvested product
     * @throws UnableToInteractException if the plant is not fully grown
     */
    public Product harvest(Quality quality) throws UnableToInteractException {
        if (isFullyGrown()) {
            return getProduct(quality);  // Return the harvested product
        } else {
            throw new UnableToInteractException("The crop is not fully grown!");
        }
    }

    /**
     * Determines whether the plant is fully grown based on its type and growth stage.
     *
     * @return {@code true} if the plant is fully grown, otherwise {@code false}
     */
    protected boolean isFullyGrown() {
        switch (this.getName()) {
            case "wheat":
                return stage == 1;
            case "berry":
                return stage == 2;
            case "coffee":
                return stage == 3;  // Max stage for coffee is 4, starts at 0
            default:
                return false;  // Unknown plant
        }
    }

    /**
     * Returns the product generated by harvesting the plant.
     *
     * @param quality the quality of the product
     * @return the product generated by the plant
     * @throws UnableToInteractException if the plant type is unknown
     */
    protected Product getProduct(Quality quality) throws UnableToInteractException {
        switch (getName()) {
            case "wheat":
                return new Bread(quality);  // Return Bread for wheat
            case "berry":
                return new Jam(quality);    // Return Jam for berry
            case "coffee":
                return new Coffee(quality); // Return Coffee for coffee beans
            default:
                throw new UnableToInteractException("Unknown plant type: " + getName());
        }
    }

    /**
     * Returns a list of styled information about the plant, including its name, symbol, and growth stage.
     *
     * @return a list containing styled information about the plant
     */
    @Override
    public List<String> getStyled() {
        return new ArrayList<>(List.of(
                getName(),
                String.valueOf(getSymbol()),
                "Stage: " + (stage + 1)
        ));
    }

    /**
     * Returns a string representation of the plant, including its name, symbol, and growth stage.
     *
     * @return a string representation of the plant
     */
    @Override
    public String toString() {
        return getName() + ", " + getSymbol() + ", Stage: " + getStage();
    }

    /**
     * Simulates the end of the day by growing the plant.
     */
    @Override
    public void endDay() {
        this.grow();
    }

    /**
     * Determines the initial growth stage based on the plant's symbol.
     * Each plant type has a specific set of symbols representing different growth stages.
     *
     * @param itemType the type of the plant (e.g., "berry", "wheat", "coffee")
     * @param symbol   the symbol representing the plant's current growth stage
     * @return the growth stage corresponding to the given symbol
     */
    private int getStageFromSymbol(String itemType, char symbol) {
        switch (itemType) {
            case "berry" -> {
                char[] berryStages = {'.', 'o', '@'};
                for (int i = 0; i < berryStages.length; i++) {
                    if (berryStages[i] == symbol) {
                        return i;
                    }
                }
            }
            case "wheat" -> {
                char[] wheatStages = {'ἴ', '#'};
                for (int i = 0; i < wheatStages.length; i++) {
                    if (wheatStages[i] == symbol) {
                        return i;
                    }
                }
            }
            case "coffee" -> {
                char[] coffeeStages = {':', ';', '*', '%'};
                for (int i = 0; i < coffeeStages.length; i++) {
                    if (coffeeStages[i] == symbol) {
                        return i;
                    }
                }
            }
            default -> {
                return 1;  // Default to stage 0 if unknown
            }
        }
        return 1;  // Default to stage 0
    }
}
